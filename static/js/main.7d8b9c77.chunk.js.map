{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","border","children","ErrorBoundry","state","hasError","this","setState","Component","App","onSearchChange","event","searchField","target","value","rob","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAkBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,6BACI,4BAAKJ,GACL,4BAAKC,MCcNI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CACIC,IAAKL,EAAOI,GAAGX,GACfC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,MACjBF,GAAIO,EAAOI,GAAGX,QAO1B,OACI,6BACKQ,ICLEK,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACbY,KAAK,SACLC,YAAY,eACZC,SAAUH,MCEXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,QAASC,OAAQ,oBACrDJ,EAAMK,WCkBJC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,gEAQfC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAIC,KAAKF,MAAMC,SACJ,wDAGJC,KAAKT,MAAMK,a,GAjBCM,aCgDZC,G,wDAzCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKV,MAAQ,CACTW,IAAK,GACLH,YAAa,IAJP,E,gEAQO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEQ,IAAKK,S,+BAQlC,IAAD,EACwBd,KAAKF,MAA1BW,EADH,EACGA,IAAKH,EADR,EACQA,YACPS,EAAiBN,EAAIO,QAAO,SAAAC,GAC9B,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASb,EAAYY,kBAGzD,OAAST,EAAIW,OAGL,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQoC,OAPlC,2C,GA3BMb,c,MCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACN,kBAAC,IAAMC,WAAP,KAEG,6BACG,kBAAC,EAAD,QAMNC,SAASC,eAAe,SDgHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7d8b9c77.chunk.js","sourcesContent":["import React from 'react';\r\n// import './Card.css'\r\n\r\nconst Card = ({id, name, email}) => {\r\n    // const {id, name, email} = props\r\n    return (\r\n        <div className=\"bg-light-green dib ma2 pa3 br3 bw2 shadow-5 grow\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <h2>{email}</h2>\r\n                {/* <h2>{props.name}</h2>\r\n                <h2>{props.email}</h2> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n        return (\r\n            <Card\r\n                key={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n                id={robots[i].id}\r\n            />)\r\n    });\r\n\r\n    // if (true) {\r\n    //     throw new Error('NOOOOOOOOOOOOO!!');\r\n    // }\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robot\"\r\n                onChange={searchChange} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '800px', border: '3px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good!</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// import { robots } from './robots';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            rob: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ rob: users }))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n        // console.log(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { rob, searchField } = this.state;\r\n        const filteredRobots = rob.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        \r\n        return (!rob.length) ?\r\n            <h1>Loading</h1> : \r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import CardList from './CardList'\nimport App from './containers/App'\n// import { robots } from './robots';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      \n      <div>\n         <App />\n         {/* <CardList robots={robots} /> */}\n         {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} /> */}\n      </div>\n   \n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}